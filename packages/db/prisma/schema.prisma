// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  directUrl    = env("MIGRATE_DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                   String    @id @default(uuid())
  clerkId              String    @unique
  stripeCustomerId     String?   @unique
  stripeSubscriptionId String?
  stripePriceId        String?
  usageUpdatedAt       DateTime?
  dayWhenbillingStarts DateTime  @default(now())
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  projects ProjectUser[]
  media    Media[]
  emails   Emails[]
}

model Project {
  id                  String    @id @default(cuid())
  name                String
  logo                String?
  domain              String    @unique
  domainVerified      Boolean   @default(false)
  domainLastCheckedAt DateTime?
  domainUnverifiedAt  DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  users   ProjectUser[]
  invites Invite[]
  posts   Post[]
  media   Media[]
  emails  Emails[]
}

enum Role {
  OWNER
  EDITOR
}

model ProjectUser {
  id        String   @id @default(cuid())
  role      Role     @default(EDITOR)
  projectId String
  userId    String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([projectId, userId])
  @@index([userId])
  @@index([projectId])
}

model Invite {
  id        String   @id @default(cuid())
  email     String
  expiresAt DateTime
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([projectId, email])
  @@index([email])
  @@index([projectId])
}

model Post {
  id        String   @id @default(cuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  title     String
  content   Bytes?
  slug      String
  clicks    Int      @default(0)
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([projectId, slug])
  @@index([projectId])
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

model Media {
  id           String    @id @default(cuid())
  projectId    String?
  project      Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
  uploadedBy   User?     @relation(fields: [uploadedById], references: [id], onDelete: SetNull)
  uploadedById String?
  type         MediaType
  url          String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([projectId, url])
  @@index([projectId])
  @@index([uploadedById])
}

enum EmailType {
  INVALID_DOMAIN
  NEAR_MONTHLY_MAXIMUM_USAGE
  USAGE_EXCEEDED
}

model Emails {
  id        String    @id @default(cuid())
  type      EmailType
  userId    String?
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String?
  project   Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
  @@index([projectId])
}
