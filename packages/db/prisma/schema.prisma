// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL") // uses connection pooling
  // directUrl         = env("DATABASE_URL_NON_POOLING") // uses a direct connection
  // shadowDatabaseUrl = env("DATABASE_URL_NON_POOLING") // used for migrations
  relationMode = "prisma"
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver,
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                   String    @id @default(cuid())
  name                 String?
  email                String    @unique
  emailVerified        DateTime?
  image                String?
  stripeCustomerId     String?   @unique
  stripeSubscriptionId String?
  stripePriceId        String?
  dayWhenbillingStarts DateTime  @default(now())
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  projects ProjectUser[]
  emails   Emails[]
  media    Media[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id                  String    @id @default(cuid())
  name                String
  logo                String?
  domain              String    @unique
  domainVerified      Boolean   @default(false)
  domainLastCheckedAt DateTime?
  domainUnverifiedAt  DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  users   ProjectUser[]
  invites Invite[]
  posts   Post[]
  media   Media[]
  emails  Emails[]
  visits  Visit[]
}

enum Role {
  OWNER
  EDITOR
}

model ProjectUser {
  id        String   @id @default(cuid())
  role      Role     @default(EDITOR)
  projectId String
  userId    String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([projectId, userId])
  @@index([userId])
  @@index([projectId])
}

model Invite {
  id        String   @id @default(cuid())
  email     String
  expiresAt DateTime
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([projectId, email])
  @@index([email])
  @@index([projectId])
}

model Post {
  id          String   @id @default(cuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  title       String
  slug        String
  content     String   @db.Text
  contentHtml String   @db.Text
  hidden      Boolean  @default(false)
  clicks      Int      @default(0)
  likes       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  visit       Visit[]
  media       Media[]

  @@unique([projectId, slug])
  @@index([projectId])
  @@index([hidden, createdAt(sort: Desc)])
  @@fulltext([title, content])
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
}

model Media {
  id           String    @id @default(cuid())
  projectId    String?
  project      Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
  uploadedById String?
  uploadedBy   User?     @relation(fields: [uploadedById], references: [id], onDelete: SetNull)
  postId       String?
  post         Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)
  type         MediaType
  url          String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([projectId])
  @@index([uploadedById])
  @@index([postId])
}

enum EmailType {
  INVALID_DOMAIN
  NEAR_MONTHLY_MAXIMUM_USAGE
  USAGE_EXCEEDED
}

model Emails {
  id        String    @id @default(cuid())
  type      EmailType
  userId    String?
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId String?
  project   Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
  @@index([projectId])
}

model Visit {
  id              String   @id @default(cuid())
  projectId       String
  project         Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  postId          String?
  post            Post?    @relation(fields: [postId], references: [id], onDelete: SetNull)
  browserName     String?
  browserVersion  String?
  osName          String?
  osVersion       String?
  deviceType      String?
  deviceVendor    String?
  deviceModel     String?
  engineName      String?
  engineVersion   String?
  cpuArchitecture String?
  city            String?
  region          String?
  country         String?
  latitude        String?
  longitude       String?
  createdAt       DateTime @default(now())

  @@index([projectId])
  @@index([postId])
}
