generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  userId            String  @db.VarChar(255)
  user              User    @relation(fields: [userId], references: [id])
  type              String  @db.Text
  provider          String  @db.VarChar(255)
  providerAccountId String  @db.VarChar(255)
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String? @db.Text
  scope             String? @db.Text
  id_token          String? @db.Text
  session_state     String? @db.Text

  @@id([provider, providerAccountId])
  @@index([userId])
  @@map("account")
}

enum AutomaticEmailType {
  INVALID_DOMAIN
  NEAR_MONTHLY_LIMIT
  MONTHLY_LIMIT_REACHED
}

model AutomaticEmail {
  id        BigInt             @id @unique(map: "id") @default(autoincrement()) @db.UnsignedBigInt
  type      AutomaticEmailType
  userId    String             @db.VarChar(255)
  user      User               @relation(fields: [userId], references: [id])
  projectId String             @db.VarChar(255)
  project   Project            @relation(fields: [projectId], references: [id])

  @@index([userId])
  @@index([projectId])
  @@map("automaticEmails")
}

enum EmailNotificationSettingType {
  COMMUNICATION
  MARKETING
  SOCIAL
  SECURITY
}

model EmailNotificationSetting {
  userId String                       @db.VarChar(255)
  user   User                         @relation(fields: [userId], references: [id])
  type   EmailNotificationSettingType
  value  Boolean                      @default(true)

  @@id([type, userId])
  @@index([userId])
  @@map("emailNotificationSettings")
}

model Like {
  userId    String   @db.VarChar(255)
  user      User     @relation(fields: [userId], references: [id])
  postId    String   @db.VarChar(255)
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())

  @@id([postId, userId])
  @@index([userId])
  @@index([postId], map: "postId_index")
  @@map("likes")
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

enum MediaForEntity {
  POST_CONTENT
  POST_THUMBNAIL
  PROJECT_LOGO
}

model Media {
  id            String          @id @default(cuid()) @db.VarChar(255)
  projectId     String?         @db.VarChar(255)
  project       Project?        @relation(fields: [projectId], references: [id])
  postId        String?         @db.VarChar(255)
  post          Post?           @relation(fields: [postId], references: [id])
  type          MediaType       @default(IMAGE)
  url           String          @db.Text
  createdAt     DateTime        @default(now())
  forEntity     Int             @default(1)
  forEntityEnum MediaForEntity?

  @@index([projectId])
  @@index([postId])
  @@map("media")
}

enum NotificationType {
  PROJECT_INVITATION
  REMOVED_FROM_PROJECT
  INVITATION_ACCEPTED
}

enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
}

model Notification {
  id        String             @id @default(cuid()) @db.VarChar(255)
  userId    String             @db.VarChar(255)
  user      User               @relation(fields: [userId], references: [id])
  type      NotificationType
  status    NotificationStatus @default(UNREAD)
  body      Json
  createdAt DateTime           @default(now())

  @@index([userId])
  @@map("notifications")
}

model Post {
  id             String   @id @default(cuid()) @db.VarChar(255)
  projectId      String   @db.VarChar(255)
  project        Project  @relation(fields: [projectId], references: [id])
  title          String   @db.VarChar(255)
  description    String?  @db.VarChar(255)
  content        Json
  thumbnailUrl   String?  @db.Text
  slug           String   @db.VarChar(255)
  hidden         Boolean  @default(true)
  seoTitle       String?  @db.VarChar(255)
  seoDescription String?  @db.VarChar(255)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
  likes          Like[]
  media          Media[]
  visits         Visit[]

  @@unique([projectId, slug], map: "posts_unique_index")
  @@index([projectId], map: "projectId_index")
  @@map("posts")
}

model ProjectInvitation {
  projectId String   @db.VarChar(255)
  project   Project  @relation(fields: [projectId], references: [id])
  email     String   @db.VarChar(255)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@id([email, projectId])
  @@index([projectId])
  @@map("projectInvitations")
}

enum Role {
  OWNER
  EDITOR
}

model ProjectMember {
  projectId String   @db.VarChar(255)
  project   Project  @relation(fields: [projectId], references: [id])
  userId    String   @db.VarChar(255)
  user      User     @relation(fields: [userId], references: [id])
  role      String   @default("editor") @db.VarChar(255)
  roleEnum  Role?
  createdAt DateTime @default(now())

  @@id([projectId, userId])
  @@unique([projectId, userId], map: "projectMembers_unique_index")
  @@index([projectId])
  @@index([userId])
  @@index([projectId, userId, role], map: "projectMembers_projectId_userId_role_index")
  @@map("projectMembers")
}

model Project {
  id                  String              @id @default(cuid()) @db.VarChar(255)
  name                String              @db.VarChar(255)
  logo                String?             @db.Text
  domain              String              @db.VarChar(255)
  domainVerified      Boolean             @default(false)
  domainLastCheckedAt DateTime?
  domainUnverifiedAt  DateTime?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @default(now())
  deletedAt           DateTime?
  automaticEmails     AutomaticEmail[]
  media               Media[]
  posts               Post[]
  invitations         ProjectInvitation[]
  members             ProjectMember[]
  visits              Visit[]

  @@index([deletedAt], map: "deleted_at_index")
  @@map("projects")
}

model Session {
  sessionToken String   @id @db.VarChar(500)
  userId       String   @db.VarChar(255)
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime @default(now())

  @@index([userId])
  @@map("session")
}

model User {
  id                        String                     @id @default(cuid()) @db.VarChar(255)
  name                      String?                    @db.Text
  email                     String                     @unique(map: "email_unique_index") @db.VarChar(255)
  emailVerified             DateTime?
  image                     String?                    @db.Text
  stripeCustomerId          String?                    @unique @db.VarChar(255)
  stripeSubscriptionId      String?                    @db.VarChar(255)
  stripePriceId             String?                    @db.VarChar(255)
  dayWhenBillingStarts      DateTime                   @default(now())
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @default(now())
  accounts                  Account[]
  sessions                  Session[]
  automaticEmails           AutomaticEmail[]
  emailNotificationSettings EmailNotificationSetting[]
  likes                     Like[]
  notifications             Notification[]
  projects                  ProjectMember[]

  @@map("user")
}

model VerificationToken {
  identifier String   @db.VarChar(255)
  token      String   @db.VarChar(500)
  expires    DateTime @default(now())

  @@id([identifier, token])
  @@map("verificationToken")
}

model Visit {
  id              BigInt   @id @unique(map: "id") @default(autoincrement()) @db.UnsignedBigInt
  projectId       String   @db.VarChar(255)
  project         Project  @relation(fields: [projectId], references: [id])
  postId          String?  @db.VarChar(255)
  post            Post?    @relation(fields: [postId], references: [id])
  browserName     String?  @db.VarChar(255)
  browserVersion  String?  @db.VarChar(255)
  osName          String?  @db.VarChar(255)
  osVersion       String?  @db.VarChar(255)
  deviceModel     String?  @db.VarChar(255)
  deviceType      String?  @db.VarChar(255)
  deviceVendor    String?  @db.VarChar(255)
  engineName      String?  @db.VarChar(255)
  engineVersion   String?  @db.VarChar(255)
  cpuArchitecture String?  @db.VarChar(255)
  geoCountry      String?  @db.VarChar(255)
  geoRegion       String?  @db.VarChar(255)
  geoCity         String?  @db.VarChar(255)
  geoLatitude     String?  @db.VarChar(255)
  geoLongitude    String?  @db.VarChar(255)
  createdAt       DateTime @default(now())
  referer         String?  @db.VarChar(255)

  @@index([projectId], map: "projectId_index")
  @@index([postId])
  @@map("visits")
}
